package com.workintech.library;

import com.workintech.library.model.*;

import java.time.LocalDate;
import java.util.*;

public class Main {
    private static final Scanner scanner = new Scanner(System.in);
    private static final Library library = new Library();
    private static final Map<Book, Reader> borrowedBooks = new HashMap<>();


    public static void main(String[] args) {
        boolean isRunning = true; // UygulamanÄ±n Ã§alÄ±ÅŸÄ±p Ã§alÄ±ÅŸmadÄ±ÄŸÄ±nÄ± kontrol eden deÄŸiÅŸken

        try {
            System.out.println("ðŸ“š KÃ¼tÃ¼phane YÃ¶netim Sistemine HoÅŸ Geldiniz!");

            // Ã–rnek kullanÄ±cÄ± ve kitap eklenmesi
            initializeSampleData();

            while (isRunning) { // DÃ¶ngÃ¼yÃ¼ kontrol eden deÄŸiÅŸken kullanÄ±lÄ±yor
                displayMenu();
                try {
                    System.out.print("SeÃ§iminizi yapÄ±n: ");
                    int choice = scanner.nextInt();
                    scanner.nextLine(); // SatÄ±r sonu temizleme

                    // KullanÄ±cÄ±nÄ±n seÃ§imine gÃ¶re iÅŸlem yapÄ±lÄ±r
                    switch (choice) {
                        case 1 -> addBook();
                        case 2 -> searchBook();
                        case 3 -> updateBook();
                        case 4 -> deleteBook();
                        case 5 -> listBooks();
                        case 6 -> listBooksByAuthor();
                        case 7 -> borrowBook();
                        case 8 -> returnBook();
                        case 9 -> addReader();
                        case 10 -> {
                            System.out.println("Uygulamadan Ã§Ä±kÄ±lÄ±yor...");
                            isRunning = false; // DÃ¶ngÃ¼ sonlanmasÄ±nÄ± saÄŸlayan kontrol
                        }
                        default -> System.out.println("GeÃ§ersiz seÃ§im! LÃ¼tfen tekrar deneyin.");
                    }
                } catch (InputMismatchException e) {
                    System.out.println("Hata: GeÃ§erli bir seÃ§im yapÄ±nÄ±z (SayÄ± girin).");
                    scanner.nextLine(); // HatalÄ± giriÅŸle birlikte buffer temizlenir
                }
            }
        } catch (Exception e) {
            System.out.println("Uygulamada bir hata meydana geldi: " + e.getMessage());
            e.printStackTrace(); // HatanÄ±n detaylarÄ±nÄ± konsola yazdÄ±rÄ±r (Opsiyonel)
        } finally {
            System.out.println("KÃ¼tÃ¼phane yÃ¶netim sistemi kapatÄ±lÄ±yor...");
            scanner.close(); // Scanner kaynaÄŸÄ±nÄ± kapatÄ±yoruz
        }
    }

    private static void initializeSampleData() {
        // Ã–rnek KullanÄ±cÄ±lar
        library.getReader().add(new Reader("Osman"));
        library.getReader().add(new Reader("HakkÄ±"));
        library.getReader().add(new Reader("Burak"));

        // Ã–rnek Ãœyeler
        MemberRecord member1 = new MemberRecord(1L, Type.STUDENT, "Osman", "KÃ¼tahya", "555-555-5555", 5);
        MemberRecord member2 = new MemberRecord(2L, Type.FACULTY, "HakkÄ±", "Ä°stanbul", "555-666-7777", 5);
        MemberRecord member3 = new MemberRecord(3L, Type.STUDENT, "Burak", "Ankara", "555-777-8888", 5);
        member1.getMember(); // DetaylarÄ± gÃ¶ster (isteÄŸe baÄŸlÄ±)
        member2.getMember();
        member3.getMember();

        // Ã–rnek Kitaplar
        library.newBook(new StudyBooks(1L, "101", "Ali", 50.0, "1. BaskÄ±", LocalDate.of(2021, 3, 1)));
        library.newBook(new Journals(2L, "102", "YÄ±lmaz", 75.0, "2. BaskÄ±", LocalDate.of(2022, 4, 2)));
        library.newBook(new Magazines(3L, "103", "Mehmet", 100.0, "3. BaskÄ±", LocalDate.of(2023, 5, 3)));
        library.newBook(new StudyBooks(4L, "104", "Veli", 125.0, "4. BaskÄ±", LocalDate.of(2024, 6, 4)));
        library.newBook(new Journals(5L, "105", "Veli", 150.0, "5. BaskÄ±", LocalDate.of(2021, 7, 5)));
        library.newBook(new Magazines(6L, "106", "Hasan", 175.0, "6. BaskÄ±", LocalDate.of(2022, 8, 6)));
        library.newBook(new StudyBooks(7L, "107", "AyÅŸe", 200.0, "7. BaskÄ±", LocalDate.of(2023, 9, 7)));

    }

    private static void displayMenu() {
        System.out.println("\n=== MENÃœ ===");
        System.out.println("1. Yeni Kitap Ekle");
        System.out.println("2. Kitap Ara");
        System.out.println("3. Kitap GÃ¼ncelle");
        System.out.println("4. Kitap Sil");
        System.out.println("5. KÃ¼tÃ¼phanedeki KitaplarÄ± Listele");
        System.out.println("6. Yazara Ait KitaplarÄ± Listele");
        System.out.println("7. Kitap Ã–dÃ¼nÃ§ Al");
        System.out.println("8. Kitap Ä°ade Et");
        System.out.println("9. Yeni Okuyucu Ekle"); // Eklendi
        System.out.println("10. Ã‡Ä±kÄ±ÅŸ");
        System.out.print("SeÃ§iminizi yapÄ±n: ");
    }

    private static void addReader() {
        System.out.println("Yeni Ã¼ye bilgilerini giriniz:");

        System.out.print("Ãœye AdÄ±: ");
        String name = scanner.nextLine();

        System.out.print("Adres: ");
        String address = scanner.nextLine();

        System.out.print("Telefon NumarasÄ±: ");
        String phoneNo = scanner.nextLine();

        System.out.print("Ãœye TÃ¼rÃ¼ (1: Ã–ÄŸrenci, 2: FakÃ¼lte): ");
        int typeChoice = scanner.nextInt();
        scanner.nextLine(); // Buffer temizleme

        Type type = (typeChoice == 1) ? Type.STUDENT : Type.FACULTY;

        // Ãœye bilgilerini kaydet
        MemberRecord newMember = new MemberRecord(
                (long) (library.getReader().size() + 1), // ID otomatik oluÅŸturulur
                type,
                name,
                address,
                phoneNo,
                MemberRecord.getMaxBookLimit()
        );

        // Library'ye bu kullanÄ±cÄ±yÄ± ekle
        library.getReader().add(new Reader(name));
        System.out.println(name + " adlÄ± kullanÄ±cÄ± sisteme Ã¼ye olarak eklendi.");
        newMember.getMember(); // Ãœye detaylarÄ±nÄ± gÃ¶ster (isteÄŸe baÄŸlÄ±)
    }

    private static void addBook() {
        System.out.println("LÃ¼tfen eklemek istediÄŸiniz kitap tÃ¼rÃ¼nÃ¼ seÃ§in:");
        System.out.println("1. StudyBooks");
        System.out.println("2. Journals");
        System.out.println("3. Magazines");

        int categoryChoice = scanner.nextInt();
        scanner.nextLine(); // Buffer temizleme

        // KullanÄ±cÄ± bilgilerini giriyor
        System.out.print("Kitap adÄ±: ");
        String title = scanner.nextLine();
        System.out.print("Yazar: ");
        String author = scanner.nextLine();
        System.out.print("Fiyat: ");
        double price = scanner.nextDouble();
        scanner.nextLine(); // Buffer temizleme
        System.out.print("BaskÄ±: ");
        String edition = scanner.nextLine();
        System.out.print("Tarih (YYYY-MM-DD): ");
        LocalDate dateOfPurchase = LocalDate.parse(scanner.nextLine());

        // KullanÄ±cÄ± seÃ§imine gÃ¶re kitap ekleme
        switch (categoryChoice) {
            case 1 -> {
                StudyBooks studyBook = new StudyBooks(
                        (long) (library.getBooks().size() + 1),
                        title, author, price, edition, dateOfPurchase);
                library.newBook(studyBook);
            }
            case 2 -> {
                Journals journal = new Journals(
                        (long) (library.getBooks().size() + 1),
                        title, author, price, edition, dateOfPurchase);
                library.newBook(journal);
            }
            case 3 -> {
                Magazines magazine = new Magazines(
                        (long) (library.getBooks().size() + 1),
                        title, author, price, edition, dateOfPurchase);
                library.newBook(magazine);
            }
            default -> System.out.println("GeÃ§ersiz seÃ§im! Kitap eklenemedi.");
        }
    }

    private static void searchBook() {
        System.out.println("Arama Ã¶lÃ§Ã¼tÃ¼ (1: ID, 2: Ad, 3: Yazar): ");
        int choice = scanner.nextInt();
        scanner.nextLine();
        if (choice == 1) {
            System.out.print("Kitap ID: ");
            Long id = scanner.nextLong();
            library.getBooks().stream()
                    .filter(b -> b.getBookID().equals(id))
                    .forEach(Book::display);
        } else if (choice == 2) {
            System.out.print("Kitap AdÄ±: ");
            String bookName = scanner.nextLine();
            library.getBooks().stream()
                    .filter(b -> b.getName().equals(bookName))
                    .forEach(Book::display);
        } else if (choice == 3) {
            System.out.print("Yazar AdÄ±: ");
            String authorName = scanner.nextLine();
            library.getBooks().stream()
                    .filter(b -> b.getAuthor().equals(authorName))
                    .forEach(Book::display);
        }
    }

    private static void updateBook() {
        System.out.print("GÃ¼ncellemek istediÄŸiniz kitabÄ±n adÄ±nÄ± girin: ");
        String bookName = scanner.nextLine();

        Book foundBook = library.getBooks().stream()
                .filter(b -> b.getName().equals(bookName))
                .findFirst()
                .orElse(null);

        if (foundBook != null) {
            System.out.print("Yeni fiyatÄ± girin: ");
            double newPrice = scanner.nextDouble();
            scanner.nextLine();
            foundBook.setPrice(newPrice);
            System.out.print("Yeni durum girin: ");
            String newStatus = scanner.nextLine();
            foundBook.setStatus(newStatus);
            System.out.println("Kitap bilgileri gÃ¼ncellendi.");
        } else {
            System.out.println("Kitap bulunamadÄ±!");
        }
    }

    private static void deleteBook() {
        System.out.print("Silmek istediÄŸiniz kitabÄ±n adÄ±nÄ± girin: ");
        String bookName = scanner.nextLine().trim(); // KullanÄ±cÄ± girdisini dÃ¼zenleme

        // KitabÄ± ad Ã¼zerinden buluyoruz
        Book foundBook = library.getBooks().stream()
                .filter(b -> b.getName().equalsIgnoreCase(bookName)) // BÃ¼yÃ¼k-kÃ¼Ã§Ã¼k harf duyarlÄ±lÄ±ÄŸÄ± yok
                .findFirst()
                .orElse(null);

        if (foundBook != null) {
            boolean isRemoved = library.deleteBook(foundBook); // `deleteBook` Ã§aÄŸÄ±rÄ±lÄ±r
            if (isRemoved) {
                System.out.println("Kitap silindi.");
            } else {
                System.out.println("Kitap silinemedi, lÃ¼tfen kontrol edin.");
            }
        } else {
            System.out.println(bookName + " adlÄ± kitap bulunamadÄ±.");
        }

        // Silme sonrasÄ± listeyi kontrol ediyoruz
        System.out.println("\nGÃ¼ncel KÃ¼tÃ¼phanedeki Kitaplar:");
        library.getBooks().forEach(book -> System.out.println(book.getName()));
    }

    private static void listBooks() {
        System.out.println("Hangi tÃ¼rdeki kitaplarÄ± gÃ¶rmek istiyorsunuz:");
        System.out.println("1. StudyBooks");
        System.out.println("2. Journals");
        System.out.println("3. Magazines");
        System.out.println("4. TÃ¼m Kitaplar");

        try {
            int choice = scanner.nextInt();
            scanner.nextLine(); // SatÄ±r sonu temizleme

            switch (choice) {
                case 1 -> {
                    if (library.listBooksByCategory(StudyBooks.class)) {
                        System.out.println("StudyBooks tÃ¼rÃ¼nde kitap bulunmamaktadÄ±r.");
                    } else {
                        library.listBooksByCategory(StudyBooks.class);
                    }
                }

                case 2 -> {
                    if (library.listBooksByCategory(Journals.class)) {
                        System.out.println("Journals tÃ¼rÃ¼nde kitap bulunmamaktadÄ±r.");
                    } else {
                        library.listBooksByCategory(Journals.class);
                    }
                }

                case 3 -> {
                    if (library.listBooksByCategory(Magazines.class)) {
                        System.out.println("Magazines tÃ¼rÃ¼nde kitap bulunmamaktadÄ±r.");
                    } else {
                        library.listBooksByCategory(Magazines.class);
                    }
                }

                case 4 -> {
                    if (library.getBooks().isEmpty()) {
                        System.out.println("Aktif olarak kÃ¼tÃ¼phanede hiÃ§ kitap bulunmamaktadÄ±r.");
                    } else {
                        library.showBook(); // TÃ¼m kitaplarÄ± listeleme
                    }
                }

                default -> System.out.println("GeÃ§ersiz seÃ§im! (1 - 4 arasÄ±nda bir deÄŸer giriniz)");
            }
        } catch (InputMismatchException e) {
            System.out.println("Hata: GeÃ§ersiz bir giriÅŸ yaptÄ±nÄ±z! LÃ¼tfen yalnÄ±zca sayÄ±sal bir deÄŸer girin.");
            scanner.nextLine(); // HatalÄ± giriÅŸ sonrasÄ± buffer temizleme
        }
    }

    private static void listBooksByAuthor() {
        System.out.print("YazarÄ±n adÄ±nÄ± girin: ");
        String authorName = scanner.nextLine();
        library.getBooks().stream()
                .filter(b -> b.getAuthor().equals(authorName))
                .forEach(Book::display);
    }

    private static void borrowBook() {
        System.out.print("Ã–dÃ¼nÃ§ almak istediÄŸiniz kitabÄ±n adÄ±nÄ± girin: ");
        String bookName = scanner.nextLine();
        System.out.print("Ãœye adÄ±nÄ±zÄ± girin: ");
        String readerName = scanner.nextLine();

        // Kitap ve Ã¼ye bilgilerini bul
        Book foundBook = library.getBooks().stream()
                .filter(b -> b.getName().equalsIgnoreCase(bookName))
                .findFirst().orElse(null);

        Reader foundReader = library.getReader().stream()
                .filter(r -> r.getName().equalsIgnoreCase(readerName))
                .findFirst().orElse(null);

        if (foundBook != null && foundReader != null) {
            String bookStatus = foundBook.getOwner(); // Kitap durumunu kontrol et
            if (bookStatus.equals("Kitap Ã¶dÃ¼nÃ§ alÄ±nmÄ±ÅŸ")) {
                System.out.println("Hata: " + bookName + " kitabÄ± ÅŸu an Ã¶dÃ¼nÃ§ alÄ±nmÄ±ÅŸ.");
            } else {
                // Ã–dÃ¼nÃ§ alma iÅŸlemleri
                borrowedBooks.put(foundBook, foundReader);     // Kitap Ã¶dÃ¼nÃ§ alÄ±nan listeye eklenir
                library.lendBook(foundBook, foundReader);      // KÃ¼tÃ¼phane kaydÄ±na iÅŸlenir
                foundBook.getOwner(); // Kitap durumunu "AlÄ±namaz" yap

                // MemberRecord iÅŸlemleri (Ã¶dÃ¼nÃ§ alÄ±nan kitap sayÄ±sÄ±nÄ± artÄ±rÄ±r)
                MemberRecord memberRecord = new MemberRecord(
                        (long) foundReader.getBooks().size(),
                        MemberRecord.getType(),
                        foundReader.getName(),
                        MemberRecord.getAddress(),
                        MemberRecord.getPhoneNo(),
                        MemberRecord.getMaxBookLimit()
                );

                // KullanÄ±cÄ±nÄ±n aldÄ±ÄŸÄ± kitaplarÄ± gÃ¶ster
                System.out.println("\n=== Ã–dÃ¼nÃ§ AlÄ±nan Kitaplar ===");
                foundReader.showBook(); // KullanÄ±cÄ±nÄ±n ÅŸu anda aldÄ±ÄŸÄ± kitaplarÄ± listele
            }
        } else {
            System.out.println("Hata: Kitap bulunamadÄ± veya Ã¼ye geÃ§ersiz!");
        }
    }

    private static void returnBook() {
        System.out.print("Ä°ade etmek istediÄŸiniz kitabÄ±n adÄ±nÄ± girin: ");
        String bookName = scanner.nextLine();
        System.out.print("Ãœye adÄ±nÄ±zÄ± girin: ");
        String readerName = scanner.nextLine();

        // Kitap ve Ã¼ye bilgilerini bul
        Book foundBook = borrowedBooks.keySet().stream()
                .filter(b -> b.getName().equalsIgnoreCase(bookName))
                .findFirst().orElse(null);

        Reader foundReader = library.getReader().stream()
                .filter(r -> r.getName().equalsIgnoreCase(readerName))
                .findFirst().orElse(null);

        if (foundBook != null && foundReader != null) {
            String bookStatus = foundBook.getOwner(); // Kitap durumunu kontrol et
            if (bookStatus.equals("Kitap kÃ¼tÃ¼phanede mevcut")) {
                System.out.println("Hata: " + bookName + " adlÄ± kitap zaten kÃ¼tÃ¼phanede mevcut!");
            } else {
                // Ä°ade iÅŸlemleri
                borrowedBooks.remove(foundBook);  // Ä°ade edilen kitabÄ± Ã¶dÃ¼nÃ§ listesinden kaldÄ±r
                library.takeBackBook(foundBook, foundReader); // KÃ¼tÃ¼phane iÅŸlemi
                foundBook.changeOwner();         // Kitap durumu "AlÄ±nabilir" yapÄ±lÄ±r

                // MemberRecord iÅŸlemleri (Ã¶dÃ¼nÃ§ edilen kitap sayÄ±sÄ±nÄ± azaltÄ±r)
                MemberRecord memberRecord = new MemberRecord(
                        (long) foundReader.getBooks().size(),
                        MemberRecord.getType(),
                        foundReader.getName(),
                        MemberRecord.getAddress(),
                        MemberRecord.getPhoneNo(),
                        MemberRecord.getMaxBookLimit()
                );

                // KullanÄ±cÄ±nÄ±n aldÄ±ÄŸÄ± kitaplarÄ± gÃ¶ster
                System.out.println("\n=== Ã–dÃ¼nÃ§ AlÄ±nan Kitaplar ===");
                foundReader.showBook(); // KullanÄ±cÄ±nÄ±n ÅŸu anda aldÄ±ÄŸÄ± kitaplarÄ± listele
            }
        } else {
            System.out.println("Hata: Kitap veya kullanÄ±cÄ± bilgisi hatalÄ± ya da iade edilemez!");
        }
    }
}
